// Admin Dashboard JavaScript
// Handles admin panel functionality, report management, and analytics

class AdminDashboard {
    constructor() {
        this.currentSection = 'dashboard';
        this.reports = [];
        this.campaigns = [];
        this.users = [];
        this.stats = {};
        this.init();
    }

    init() {
        this.loadAdminData();
        this.setupNavigation();
        this.setupCharts();
        this.setupReportsTable();
        this.loadRecentActivity();
    }

    async loadAdminData() {
        try {
            // Mock admin data
            this.reports = [
                {
                    id: 'report_1',
                    title: 'Dangerous Pothole on MG Road',
                    category: 'Roads',
                    status: 'in_progress',
                    severity: 'high',
                    reporter: 'Priya Sharma',
                    created_at: '2024-12-15T09:30:00Z',
                    assigned_authority: 'BBMP Road Department',
                    ai_tags: ['road_damage', 'traffic_hazard', 'infrastructure'],
                    ai_confidence: 0.92,
                    verification_votes: 8,
                    upvotes: 15
                },
                {
                    id: 'report_2',
                    title: 'Non-functional Street Lights',
                    category: 'Electricity',
                    status: 'verified',
                    severity: 'medium',
                    reporter: 'Rajesh Kumar',
                    created_at: '2024-12-14T18:45:00Z',
                    assigned_authority: 'BESCOM',
                    ai_tags: ['lighting', 'safety', 'electrical'],
                    ai_confidence: 0.88,
                    verification_votes: 6,
                    upvotes: 12
                },
                {
                    id: 'report_3',
                    title: 'Sewage Overflow Near Beach',
                    category: 'Water',
                    status: 'resolved',
                    severity: 'critical',
                    reporter: 'Dr. Anita Patel',
                    created_at: '2024-12-10T07:20:00Z',
                    assigned_authority: 'BMC Water Department',
                    ai_tags: ['water_contamination', 'health_hazard', 'sewage'],
                    ai_confidence: 0.94,
                    verification_votes: 15,
                    upvotes: 22,
                    resolved_at: '2024-12-18T16:30:00Z'
                },
                {
                    id: 'report_4',
                    title: 'Garbage Collection Delay',
                    category: 'Waste Management',
                    status: 'pending',
                    severity: 'medium',
                    reporter: 'Amit Gupta',
                    created_at: '2024-12-16T12:10:00Z',
                    assigned_authority: null,
                    ai_tags: ['waste', 'hygiene', 'collection_delay'],
                    ai_confidence: 0.85,
                    verification_votes: 4,
                    upvotes: 8
                },
                {
                    id: 'report_5',
                    title: 'Air Pollution in IT Hub',
                    category: 'Environment',
                    status: 'verified',
                    severity: 'high',
                    reporter: 'Sneha Reddy',
                    created_at: '2024-12-12T15:30:00Z',
                    assigned_authority: 'GHMC Environment Wing',
                    ai_tags: ['air_pollution', 'construction', 'environmental'],
                    ai_confidence: 0.91,
                    verification_votes: 12,
                    upvotes: 18
                }
            ];\n\n            this.campaigns = [\n                {\n                    id: 'campaign_1',\n                    title: 'Cubbon Park Cleanup Drive',\n                    organizer: 'Green Bangalore Foundation',\n                    status: 'upcoming',\n                    participants: 78,\n                    max_participants: 100,\n                    start_date: '2024-12-22T07:00:00Z'\n                },\n                {\n                    id: 'campaign_2',\n                    title: 'Tree Plantation Drive',\n                    organizer: 'Environmental Youth Alliance',\n                    status: 'upcoming',\n                    participants: 32,\n                    max_participants: 50,\n                    start_date: '2024-12-25T08:00:00Z'\n                },\n                {\n                    id: 'campaign_3',\n                    title: 'Road Safety Awareness',\n                    organizer: 'Mumbai Traffic Police',\n                    status: 'active',\n                    participants: 145,\n                    max_participants: 200,\n                    start_date: '2024-12-20T16:00:00Z'\n                },\n                {\n                    id: 'campaign_4',\n                    title: 'Community Health Camp',\n                    organizer: 'Bangalore Medical Association',\n                    status: 'completed',\n                    participants: 68,\n                    max_participants: 75,\n                    start_date: '2024-12-18T09:00:00Z'\n                }\n            ];\n\n            this.users = [\n                { name: 'Priya Sharma', role: 'citizen', points: 2850, reports: 12 },\n                { name: 'Rajesh Kumar', role: 'volunteer', points: 4200, reports: 18 },\n                { name: 'Dr. Anita Patel', role: 'authority', points: 1800, reports: 5 },\n                { name: 'Amit Gupta', role: 'citizen', points: 1200, reports: 7 },\n                { name: 'Sneha Reddy', role: 'volunteer', points: 3150, reports: 15 }\n            ];\n\n            this.calculateStats();\n        } catch (error) {\n            console.error('Failed to load admin data:', error);\n        }\n    }\n\n    calculateStats() {\n        this.stats = {\n            totalReports: this.reports.length,\n            resolvedReports: this.reports.filter(r => r.status === 'resolved').length,\n            pendingReports: this.reports.filter(r => r.status === 'pending').length,\n            activeUsers: this.users.length,\n            activeCampaigns: this.campaigns.filter(c => c.status === 'active').length,\n            averageResolutionTime: 4.2,\n            monthlyGrowth: {\n                reports: 12,\n                users: 15,\n                resolution: -0.3\n            }\n        };\n    }\n\n    setupNavigation() {\n        const navItems = document.querySelectorAll('.admin-nav-item');\n        navItems.forEach(item => {\n            item.addEventListener('click', (e) => {\n                e.preventDefault();\n                const href = item.getAttribute('href');\n                if (href && href.startsWith('#')) {\n                    const section = href.substring(1);\n                    this.switchSection(section);\n                }\n            });\n        });\n\n        // Setup notification button\n        const notificationBtn = document.getElementById('notificationBtn');\n        if (notificationBtn) {\n            notificationBtn.addEventListener('click', this.showNotifications.bind(this));\n        }\n    }\n\n    switchSection(sectionName) {\n        this.currentSection = sectionName;\n        \n        // Update navigation styles\n        const navItems = document.querySelectorAll('.admin-nav-item');\n        navItems.forEach(item => {\n            const href = item.getAttribute('href');\n            if (href === `#${sectionName}`) {\n                item.className = 'admin-nav-item bg-indigo-50 text-indigo-600 flex items-center px-4 py-3 rounded-lg font-medium';\n            } else {\n                item.className = 'admin-nav-item text-gray-700 hover:bg-gray-50 flex items-center px-4 py-3 rounded-lg font-medium';\n            }\n        });\n\n        // Show/hide sections\n        const sections = document.querySelectorAll('.admin-section');\n        sections.forEach(section => {\n            if (section.id === `${sectionName}Section`) {\n                section.classList.remove('hidden');\n            } else {\n                section.classList.add('hidden');\n            }\n        });\n\n        // Load section-specific content\n        this.loadSectionContent(sectionName);\n    }\n\n    loadSectionContent(sectionName) {\n        switch(sectionName) {\n            case 'reports':\n                this.renderReportsTable();\n                break;\n            case 'campaigns':\n                this.renderCampaignsSection();\n                break;\n            case 'users':\n                this.renderUsersSection();\n                break;\n            case 'analytics':\n                this.renderAnalyticsSection();\n                break;\n        }\n    }\n\n    setupCharts() {\n        // Category Chart\n        const categoryCtx = document.getElementById('categoryChart');\n        if (categoryCtx) {\n            const categoryData = this.getCategoryData();\n            new Chart(categoryCtx, {\n                type: 'doughnut',\n                data: {\n                    labels: categoryData.labels,\n                    datasets: [{\n                        data: categoryData.values,\n                        backgroundColor: [\n                            '#3B82F6', // blue\n                            '#10B981', // green\n                            '#F59E0B', // orange\n                            '#EF4444', // red\n                            '#8B5CF6'  // purple\n                        ],\n                        borderWidth: 0\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    plugins: {\n                        legend: {\n                            position: 'bottom'\n                        }\n                    }\n                }\n            });\n        }\n\n        // Trend Chart\n        const trendCtx = document.getElementById('trendChart');\n        if (trendCtx) {\n            new Chart(trendCtx, {\n                type: 'line',\n                data: {\n                    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n                    datasets: [{\n                        label: 'Reports Submitted',\n                        data: [65, 78, 92, 85, 98, 112, 125, 140, 128, 155, 162, 180],\n                        borderColor: '#3B82F6',\n                        backgroundColor: 'rgba(59, 130, 246, 0.1)',\n                        tension: 0.4,\n                        fill: true\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    plugins: {\n                        legend: {\n                            display: false\n                        }\n                    },\n                    scales: {\n                        y: {\n                            beginAtZero: true,\n                            grid: {\n                                color: 'rgba(0, 0, 0, 0.1)'\n                            }\n                        },\n                        x: {\n                            grid: {\n                                display: false\n                            }\n                        }\n                    }\n                }\n            });\n        }\n    }\n\n    getCategoryData() {\n        const categories = {};\n        this.reports.forEach(report => {\n            categories[report.category] = (categories[report.category] || 0) + 1;\n        });\n\n        return {\n            labels: Object.keys(categories),\n            values: Object.values(categories)\n        };\n    }\n\n    setupReportsTable() {\n        // Setup filter handlers for reports section\n        const filters = document.querySelectorAll('#reportsSection select, #reportsSection input');\n        filters.forEach(filter => {\n            filter.addEventListener('change', this.renderReportsTable.bind(this));\n            filter.addEventListener('input', this.renderReportsTable.bind(this));\n        });\n    }\n\n    renderReportsTable() {\n        const tbody = document.getElementById('reportsTable');\n        if (!tbody) return;\n\n        tbody.innerHTML = '';\n        \n        // Apply filters (simplified for demo)\n        const filteredReports = this.reports;\n\n        filteredReports.forEach(report => {\n            const row = document.createElement('tr');\n            row.className = 'hover:bg-gray-50';\n            \n            row.innerHTML = `\n                <td class=\"px-6 py-4 whitespace-nowrap\">\n                    <div class=\"flex items-center\">\n                        <div class=\"ml-4\">\n                            <div class=\"text-sm font-medium text-gray-900\">${report.title}</div>\n                            <div class=\"text-sm text-gray-500\">by ${report.reporter}</div>\n                            <div class=\"text-sm text-gray-500\">${window.CivicUtils?.formatRelativeTime(report.created_at) || 'Recently'}</div>\n                        </div>\n                    </div>\n                </td>\n                <td class=\"px-6 py-4 whitespace-nowrap\">\n                    <span class=\"px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${this.getStatusBadgeClass(report.status)}\">\n                        ${report.status.replace('_', ' ')}\n                    </span>\n                    <div class=\"text-xs text-gray-500 mt-1\">${report.category}</div>\n                    <span class=\"px-2 inline-flex text-xs leading-5 font-semibold rounded-full mt-1 ${this.getSeverityBadgeClass(report.severity)}\">\n                        ${report.severity}\n                    </span>\n                </td>\n                <td class=\"px-6 py-4 whitespace-nowrap\">\n                    <div class=\"text-sm text-gray-900\">AI: ${Math.round(report.ai_confidence * 100)}%</div>\n                    <div class=\"text-xs text-gray-500\">${report.ai_tags.slice(0, 2).join(', ')}</div>\n                    <div class=\"text-xs text-blue-600 mt-1\">${report.verification_votes} verifications</div>\n                </td>\n                <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                    ${report.assigned_authority || 'Unassigned'}\n                </td>\n                <td class=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                    <div class=\"flex space-x-2\">\n                        <button onclick=\"window.adminDashboard.updateReportStatus('${report.id}', 'verified')\" \n                                class=\"text-blue-600 hover:text-blue-900\">Verify</button>\n                        <button onclick=\"window.adminDashboard.updateReportStatus('${report.id}', 'in_progress')\" \n                                class=\"text-orange-600 hover:text-orange-900\">Assign</button>\n                        <button onclick=\"window.adminDashboard.updateReportStatus('${report.id}', 'resolved')\" \n                                class=\"text-green-600 hover:text-green-900\">Resolve</button>\n                    </div>\n                </td>\n            `;\n            \n            tbody.appendChild(row);\n        });\n    }\n\n    getStatusBadgeClass(status) {\n        const classes = {\n            'pending': 'bg-gray-100 text-gray-800',\n            'verified': 'bg-blue-100 text-blue-800',\n            'in_progress': 'bg-orange-100 text-orange-800',\n            'resolved': 'bg-green-100 text-green-800',\n            'rejected': 'bg-red-100 text-red-800'\n        };\n        return classes[status] || 'bg-gray-100 text-gray-800';\n    }\n\n    getSeverityBadgeClass(severity) {\n        const classes = {\n            'low': 'bg-green-100 text-green-800',\n            'medium': 'bg-yellow-100 text-yellow-800',\n            'high': 'bg-orange-100 text-orange-800',\n            'critical': 'bg-red-100 text-red-800'\n        };\n        return classes[severity] || 'bg-gray-100 text-gray-800';\n    }\n\n    updateReportStatus(reportId, newStatus) {\n        const report = this.reports.find(r => r.id === reportId);\n        if (report) {\n            const oldStatus = report.status;\n            report.status = newStatus;\n            \n            if (newStatus === 'resolved' && !report.resolved_at) {\n                report.resolved_at = new Date().toISOString();\n            }\n            \n            // Re-render table\n            this.renderReportsTable();\n            \n            // Show notification\n            if (window.CivicReporter) {\n                window.CivicReporter.showNotification(\n                    `Report status updated from \"${oldStatus}\" to \"${newStatus}\".`, \n                    'success'\n                );\n            }\n            \n            // Update stats\n            this.calculateStats();\n        }\n    }\n\n    renderCampaignsSection() {\n        const container = document.getElementById('activeCampaigns');\n        if (!container) return;\n        \n        container.innerHTML = '';\n        \n        this.campaigns.forEach(campaign => {\n            const campaignElement = document.createElement('div');\n            campaignElement.className = 'flex items-center justify-between p-4 border border-gray-200 rounded-lg';\n            \n            campaignElement.innerHTML = `\n                <div>\n                    <h4 class=\"font-semibold text-gray-900\">${campaign.title}</h4>\n                    <p class=\"text-sm text-gray-600\">${campaign.organizer}</p>\n                    <div class=\"flex items-center space-x-4 mt-1 text-xs text-gray-500\">\n                        <span class=\"px-2 py-1 ${this.getCampaignStatusClass(campaign.status)} rounded\">\n                            ${campaign.status}\n                        </span>\n                        <span>${campaign.participants}/${campaign.max_participants} participants</span>\n                        <span>${window.CivicUtils?.formatDate(campaign.start_date) || 'Date TBD'}</span>\n                    </div>\n                </div>\n                <div class=\"flex space-x-2\">\n                    <button onclick=\"window.adminDashboard.manageCampaign('${campaign.id}')\" \n                            class=\"bg-indigo-600 text-white px-3 py-1 rounded text-sm hover:bg-indigo-700\">\n                        Manage\n                    </button>\n                    <button onclick=\"window.adminDashboard.viewCampaignStats('${campaign.id}')\" \n                            class=\"bg-gray-200 text-gray-700 px-3 py-1 rounded text-sm hover:bg-gray-300\">\n                        Stats\n                    </button>\n                </div>\n            `;\n            \n            container.appendChild(campaignElement);\n        });\n    }\n\n    getCampaignStatusClass(status) {\n        const classes = {\n            'upcoming': 'bg-blue-100 text-blue-800',\n            'active': 'bg-orange-100 text-orange-800',\n            'completed': 'bg-green-100 text-green-800',\n            'cancelled': 'bg-red-100 text-red-800'\n        };\n        return classes[status] || 'bg-gray-100 text-gray-800';\n    }\n\n    manageCampaign(campaignId) {\n        // Implement campaign management functionality\n        if (window.CivicReporter) {\n            window.CivicReporter.showNotification('Campaign management feature would open here.', 'info');\n        }\n    }\n\n    viewCampaignStats(campaignId) {\n        // Implement campaign statistics view\n        if (window.CivicReporter) {\n            window.CivicReporter.showNotification('Campaign statistics would be displayed here.', 'info');\n        }\n    }\n\n    loadRecentActivity() {\n        // Recent activity is already pre-loaded in HTML\n        // This could be enhanced to load real-time data\n    }\n\n    showNotifications() {\n        // Mock notification system\n        const notifications = [\n            'New high-priority report: Dangerous Pothole on MG Road',\n            '12 reports require verification',\n            'Tree Plantation campaign needs approval'\n        ];\n        \n        let notificationText = notifications.join('\\n\\n');\n        if (window.CivicReporter) {\n            window.CivicReporter.showNotification('Notifications:\\n' + notificationText, 'info');\n        } else {\n            alert('Notifications:\\n\\n' + notificationText);\n        }\n    }\n\n    renderUsersSection() {\n        // Implement user management section\n        console.log('Users section would be rendered here');\n    }\n\n    renderAnalyticsSection() {\n        // Implement analytics section\n        console.log('Analytics section would be rendered here');\n    }\n\n    // Export data functionality\n    exportData(type) {\n        let data;\n        let filename;\n        \n        switch(type) {\n            case 'reports':\n                data = this.reports;\n                filename = 'civic_reports.json';\n                break;\n            case 'campaigns':\n                data = this.campaigns;\n                filename = 'civic_campaigns.json';\n                break;\n            case 'users':\n                data = this.users;\n                filename = 'civic_users.json';\n                break;\n            default:\n                return;\n        }\n        \n        const jsonData = JSON.stringify(data, null, 2);\n        const blob = new Blob([jsonData], { type: 'application/json' });\n        const url = URL.createObjectURL(blob);\n        \n        const a = document.createElement('a');\n        a.href = url;\n        a.download = filename;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n    }\n}\n\n// Initialize admin dashboard when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    const adminDashboard = new AdminDashboard();\n    \n    // Make globally available\n    window.adminDashboard = adminDashboard;\n});